// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: proto/forester.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Forester_Get_FullMethodName    = "/forester.Forester/Get"
	Forester_Set_FullMethodName    = "/forester.Forester/Set"
	Forester_Delete_FullMethodName = "/forester.Forester/Delete"
)

// ForesterClient is the client API for Forester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForesterClient interface {
	Get(ctx context.Context, in *ForesterGetRequest, opts ...grpc.CallOption) (*ForesterGetResponse, error)
	Set(ctx context.Context, in *ForesterSetRequest, opts ...grpc.CallOption) (*ForesterSetResponse, error)
	Delete(ctx context.Context, in *ForesterDeleteRequest, opts ...grpc.CallOption) (*ForesterDeleteResponse, error)
}

type foresterClient struct {
	cc grpc.ClientConnInterface
}

func NewForesterClient(cc grpc.ClientConnInterface) ForesterClient {
	return &foresterClient{cc}
}

func (c *foresterClient) Get(ctx context.Context, in *ForesterGetRequest, opts ...grpc.CallOption) (*ForesterGetResponse, error) {
	out := new(ForesterGetResponse)
	err := c.cc.Invoke(ctx, Forester_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foresterClient) Set(ctx context.Context, in *ForesterSetRequest, opts ...grpc.CallOption) (*ForesterSetResponse, error) {
	out := new(ForesterSetResponse)
	err := c.cc.Invoke(ctx, Forester_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foresterClient) Delete(ctx context.Context, in *ForesterDeleteRequest, opts ...grpc.CallOption) (*ForesterDeleteResponse, error) {
	out := new(ForesterDeleteResponse)
	err := c.cc.Invoke(ctx, Forester_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForesterServer is the server API for Forester service.
// All implementations must embed UnimplementedForesterServer
// for forward compatibility
type ForesterServer interface {
	Get(context.Context, *ForesterGetRequest) (*ForesterGetResponse, error)
	Set(context.Context, *ForesterSetRequest) (*ForesterSetResponse, error)
	Delete(context.Context, *ForesterDeleteRequest) (*ForesterDeleteResponse, error)
	mustEmbedUnimplementedForesterServer()
}

// UnimplementedForesterServer must be embedded to have forward compatible implementations.
type UnimplementedForesterServer struct {
}

func (UnimplementedForesterServer) Get(context.Context, *ForesterGetRequest) (*ForesterGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedForesterServer) Set(context.Context, *ForesterSetRequest) (*ForesterSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedForesterServer) Delete(context.Context, *ForesterDeleteRequest) (*ForesterDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedForesterServer) mustEmbedUnimplementedForesterServer() {}

// UnsafeForesterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForesterServer will
// result in compilation errors.
type UnsafeForesterServer interface {
	mustEmbedUnimplementedForesterServer()
}

func RegisterForesterServer(s grpc.ServiceRegistrar, srv ForesterServer) {
	s.RegisterService(&Forester_ServiceDesc, srv)
}

func _Forester_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForesterGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForesterServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forester_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForesterServer).Get(ctx, req.(*ForesterGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forester_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForesterSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForesterServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forester_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForesterServer).Set(ctx, req.(*ForesterSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Forester_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForesterDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForesterServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Forester_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForesterServer).Delete(ctx, req.(*ForesterDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Forester_ServiceDesc is the grpc.ServiceDesc for Forester service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Forester_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forester.Forester",
	HandlerType: (*ForesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Forester_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Forester_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Forester_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/forester.proto",
}
