// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: proto/lumberjack.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Lumberjack_Get_FullMethodName    = "/lumberjack.Lumberjack/Get"
	Lumberjack_Set_FullMethodName    = "/lumberjack.Lumberjack/Set"
	Lumberjack_Delete_FullMethodName = "/lumberjack.Lumberjack/Delete"
)

// LumberjackClient is the client API for Lumberjack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LumberjackClient interface {
	Get(ctx context.Context, in *LumberjackRequest, opts ...grpc.CallOption) (*LumberjackResponse, error)
	Set(ctx context.Context, in *LumberjackRequest, opts ...grpc.CallOption) (*LumberjackResponse, error)
	Delete(ctx context.Context, in *LumberjackRequest, opts ...grpc.CallOption) (*LumberjackResponse, error)
}

type lumberjackClient struct {
	cc grpc.ClientConnInterface
}

func NewLumberjackClient(cc grpc.ClientConnInterface) LumberjackClient {
	return &lumberjackClient{cc}
}

func (c *lumberjackClient) Get(ctx context.Context, in *LumberjackRequest, opts ...grpc.CallOption) (*LumberjackResponse, error) {
	out := new(LumberjackResponse)
	err := c.cc.Invoke(ctx, Lumberjack_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lumberjackClient) Set(ctx context.Context, in *LumberjackRequest, opts ...grpc.CallOption) (*LumberjackResponse, error) {
	out := new(LumberjackResponse)
	err := c.cc.Invoke(ctx, Lumberjack_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lumberjackClient) Delete(ctx context.Context, in *LumberjackRequest, opts ...grpc.CallOption) (*LumberjackResponse, error) {
	out := new(LumberjackResponse)
	err := c.cc.Invoke(ctx, Lumberjack_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LumberjackServer is the server API for Lumberjack service.
// All implementations must embed UnimplementedLumberjackServer
// for forward compatibility
type LumberjackServer interface {
	Get(context.Context, *LumberjackRequest) (*LumberjackResponse, error)
	Set(context.Context, *LumberjackRequest) (*LumberjackResponse, error)
	Delete(context.Context, *LumberjackRequest) (*LumberjackResponse, error)
	mustEmbedUnimplementedLumberjackServer()
}

// UnimplementedLumberjackServer must be embedded to have forward compatible implementations.
type UnimplementedLumberjackServer struct {
}

func (UnimplementedLumberjackServer) Get(context.Context, *LumberjackRequest) (*LumberjackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLumberjackServer) Set(context.Context, *LumberjackRequest) (*LumberjackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedLumberjackServer) Delete(context.Context, *LumberjackRequest) (*LumberjackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLumberjackServer) mustEmbedUnimplementedLumberjackServer() {}

// UnsafeLumberjackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LumberjackServer will
// result in compilation errors.
type UnsafeLumberjackServer interface {
	mustEmbedUnimplementedLumberjackServer()
}

func RegisterLumberjackServer(s grpc.ServiceRegistrar, srv LumberjackServer) {
	s.RegisterService(&Lumberjack_ServiceDesc, srv)
}

func _Lumberjack_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LumberjackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LumberjackServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lumberjack_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LumberjackServer).Get(ctx, req.(*LumberjackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lumberjack_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LumberjackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LumberjackServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lumberjack_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LumberjackServer).Set(ctx, req.(*LumberjackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lumberjack_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LumberjackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LumberjackServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Lumberjack_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LumberjackServer).Delete(ctx, req.(*LumberjackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lumberjack_ServiceDesc is the grpc.ServiceDesc for Lumberjack service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lumberjack_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lumberjack.Lumberjack",
	HandlerType: (*LumberjackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Lumberjack_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Lumberjack_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Lumberjack_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lumberjack.proto",
}
